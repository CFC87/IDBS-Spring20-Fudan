{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction to Database Systems \u00b6 Welcome! This course is an introductory course to database systems. In this course, you will be touching both the theoritical fundations behind the database system (i.e. relational algebra and CNF) and the practical end of using an actual database management system with the help of a series of carefully designed assignments. Logistics \u00b6 Instructor: Wei Wang ( @\u6c6a\u536b ) Teaching Assistants: Zhifeng Hu ( @ichn-hu ), Yuan Sui Time and Location: Tue 11-13 at HGX202, Fri 8-9 at Computing Center 303, for now, the location is online. Grading: to be decided Q&A: Please use issues to ask questions or post about anything related to this course. Syllabus \u00b6 Week No. Date Content Additional Materials 3 2020-03-13 Assignment 1 Released 4 2020-03-20 Assignment 1 Due Assignment 2 Released 5 2020-03-27 6 2020-04-03 Assignment 2 Due Assignment Guidance \u00b6 TODO Honor Code \u00b6 All the assignments are meant to be submitted under this GitHub repository, therefore it is publicly available to everyone, even before the deadline of each assignments. You should not peek into other's submission before you submitted your own solution to each assignment. We do not have any mechanism to enforce this, but you are fully trusted that you won't cheat. Please hold the honor code in your mind and do not cheat. Public discussions and question-answerings are welcomed, and you could look into others' solutions after your own submission to learn from others. Late Policy \u00b6 If you can't work out the assignments before the deadline, then by all means please let us know about your situation. All these assignments are designed for you to actually learn database systems happily. We understand the pressure you have with all the courses","title":"Welcome"},{"location":"#introduction-to-database-systems","text":"Welcome! This course is an introductory course to database systems. In this course, you will be touching both the theoritical fundations behind the database system (i.e. relational algebra and CNF) and the practical end of using an actual database management system with the help of a series of carefully designed assignments.","title":"Introduction to Database Systems"},{"location":"#logistics","text":"Instructor: Wei Wang ( @\u6c6a\u536b ) Teaching Assistants: Zhifeng Hu ( @ichn-hu ), Yuan Sui Time and Location: Tue 11-13 at HGX202, Fri 8-9 at Computing Center 303, for now, the location is online. Grading: to be decided Q&A: Please use issues to ask questions or post about anything related to this course.","title":"Logistics"},{"location":"#syllabus","text":"Week No. Date Content Additional Materials 3 2020-03-13 Assignment 1 Released 4 2020-03-20 Assignment 1 Due Assignment 2 Released 5 2020-03-27 6 2020-04-03 Assignment 2 Due","title":"Syllabus"},{"location":"#assignment-guidance","text":"TODO","title":"Assignment Guidance"},{"location":"#honor-code","text":"All the assignments are meant to be submitted under this GitHub repository, therefore it is publicly available to everyone, even before the deadline of each assignments. You should not peek into other's submission before you submitted your own solution to each assignment. We do not have any mechanism to enforce this, but you are fully trusted that you won't cheat. Please hold the honor code in your mind and do not cheat. Public discussions and question-answerings are welcomed, and you could look into others' solutions after your own submission to learn from others.","title":"Honor Code"},{"location":"#late-policy","text":"If you can't work out the assignments before the deadline, then by all means please let us know about your situation. All these assignments are designed for you to actually learn database systems happily. We understand the pressure you have with all the courses","title":"Late Policy"},{"location":"assignment1/readme-obsolete/","text":"Assignment 1, Environment Setup \u00b6 This is the first assignment of the course, and it will guide you to setup an environment to be able to play with the actual database system. The primary database we will be using in this class is MySQL. MySQL is an open source relational database management system created by Oracle, and it is among the topest in the database market 1 and widely adopted by a lot of companies. The programming language we will be using in the series of assignments is golang, for its simplicity and the easy-to-use concurrency mechanism. Golang, developed by Google, is a statically typed programming langauge (we'll refer to golang as Go in the following content). It is becomming more and more popular in the recent several years, companies like Bilibili and Zhihu and so many more are using Go to build the backend of their applications, so it is very desirable and meaningful to start to learn this language. The goal of this assignment is to help you install MySQL on your development environment, and teaches you the basic usage of how to interact with MySQL using command line and programs. In this assignment, you are not required to actually write Go, but you should install the compiler and compile a Go program to interact with the database. Environment Reqirements \u00b6 The operating system is required to be Linux, ideally ubuntu, debian or archlinux, but most of the linux distributions should be fine. We do not have any support for other operating systems like Windows or MacOS, so if you are using any of them there are some suggestions for you: Install a virtual machine or dual-boot Linux (mostly recommended) Buy a VPS with Linux operating system, and use ssh to access it through out all the assignments Actually, MacOS and Windows should actually work, because the primary softwares we will be using, MySQl and Go, are all cross platform. However, MySQL as a software that runs in server, it is typically run on Linux, therefore to give you the most native experience of using MySQL, you are highly recommended to try to get access to an Linux operating system for the course. Install MySQL and Go \u00b6 If you think that I am going to teach you how to install them step by step, then you are too naive! Try to use google to search \"install A on B\", substitute A with \"MySQL\" or \"golang\" and B with the name of your operating system, such as \"install MySQL on Archilinux\" 2 . Note that we will be using MySQL version 8.0, so be careful not to install MySQL 5.7. Although I am not telling you the steps, there are some common pitfalls that you should be aware of: Do not leave the password blank when you are installing MySQL, give it a password for the root user, and memorize it. Later you will use this password as the root user to access the database. Well, if you are just too lazy, or can not find some good tutorial to teach you how to install them, here is the generous gift from your TA: https://db-engines.com/en/ranking \u21a9 If you do not have access to Google, you should work out a way to get access to it, here is a website that lists some mirror sites of Google that might be used in mainland China. If you failed to access Google after many attempts, then by all means try to use the international version of bing . \u21a9","title":"Assignment 1, Environment Setup"},{"location":"assignment1/readme-obsolete/#assignment-1-environment-setup","text":"This is the first assignment of the course, and it will guide you to setup an environment to be able to play with the actual database system. The primary database we will be using in this class is MySQL. MySQL is an open source relational database management system created by Oracle, and it is among the topest in the database market 1 and widely adopted by a lot of companies. The programming language we will be using in the series of assignments is golang, for its simplicity and the easy-to-use concurrency mechanism. Golang, developed by Google, is a statically typed programming langauge (we'll refer to golang as Go in the following content). It is becomming more and more popular in the recent several years, companies like Bilibili and Zhihu and so many more are using Go to build the backend of their applications, so it is very desirable and meaningful to start to learn this language. The goal of this assignment is to help you install MySQL on your development environment, and teaches you the basic usage of how to interact with MySQL using command line and programs. In this assignment, you are not required to actually write Go, but you should install the compiler and compile a Go program to interact with the database.","title":"Assignment 1, Environment Setup"},{"location":"assignment1/readme-obsolete/#environment-reqirements","text":"The operating system is required to be Linux, ideally ubuntu, debian or archlinux, but most of the linux distributions should be fine. We do not have any support for other operating systems like Windows or MacOS, so if you are using any of them there are some suggestions for you: Install a virtual machine or dual-boot Linux (mostly recommended) Buy a VPS with Linux operating system, and use ssh to access it through out all the assignments Actually, MacOS and Windows should actually work, because the primary softwares we will be using, MySQl and Go, are all cross platform. However, MySQL as a software that runs in server, it is typically run on Linux, therefore to give you the most native experience of using MySQL, you are highly recommended to try to get access to an Linux operating system for the course.","title":"Environment Reqirements"},{"location":"assignment1/readme-obsolete/#install-mysql-and-go","text":"If you think that I am going to teach you how to install them step by step, then you are too naive! Try to use google to search \"install A on B\", substitute A with \"MySQL\" or \"golang\" and B with the name of your operating system, such as \"install MySQL on Archilinux\" 2 . Note that we will be using MySQL version 8.0, so be careful not to install MySQL 5.7. Although I am not telling you the steps, there are some common pitfalls that you should be aware of: Do not leave the password blank when you are installing MySQL, give it a password for the root user, and memorize it. Later you will use this password as the root user to access the database. Well, if you are just too lazy, or can not find some good tutorial to teach you how to install them, here is the generous gift from your TA: https://db-engines.com/en/ranking \u21a9 If you do not have access to Google, you should work out a way to get access to it, here is a website that lists some mirror sites of Google that might be used in mainland China. If you failed to access Google after many attempts, then by all means try to use the international version of bing . \u21a9","title":"Install MySQL and Go"},{"location":"assignment1/readme/","text":"Assignment 1, Basic SQL \u00b6 This is the first assignment of the course, it asks you to write SQL to create tables and query from them. Basically you need to use create select where join group by order by having to be able to finish the assignment. Working Directory Setup \u00b6 This is the first step of the assignment, you need to get yourself familiar with git and GitHub. First of all, create a GitHub id if you do not yet have one. Then fork this project on GitHub, which will create a mirror repository under your own account. Then git clone your forked project in your local environment. You need to setup your GitHub account on your local machine for git if you have not yet done so. 1 git clone https://github.com/your-github-id/IDBS-Spring20-Fudan.git Once you've cloned the project in your local environment, get to IDBS-Spring20-Fudan/assignments/ass1/submission and create a directory and name it by your student id, for example IDBS-Spring20-Fudan/assignments/ass1/submission/16307130177 , and this directory will be your working directory. You are ONLY allowed to modify files under this directory, any other modifications outside this directory will make your submission invalid. Table Creation \u00b6 You need to create 3 tables under the database ass1 , namely employee , book and record . Create a file named create_table.sql under your working directory, and write the SQL to create the tables asked in that file. The constraint for each table is: employee has 4 columns, id , name , office and age , where id is the primary key and name and office is ascii string with length smaller than 32, while age is number between 0 and 100. Choose appropriate type for each column. book also has 4 columns, id , name , author and publisher , where id is the primary key and other columns are all ascii string with length smaller than 32. record has 3 columns, book_id , employee_id and time , where the two IDs are foreign keys that references the id column of book and employee , and time is of type DATE . Once you finished the table creation SQLs, create a database in your MySQL named ass1 , and then run the following command in your command line with username replaced by your username (such as root ), the command asks the MySQL client to connect to the MySQL server running at localhost on behalf of the user specified by the username and run the SQLs in the given file create_table.sql under database ass1 . 1 mysql -h localhost -u username ass1 -p < create_table.sql If mysql complains about any error, try to fix it in create_table.sql . You could drop and recreate the database ass1 if you've ruined the database with wrongly created tables. Once you've created the table, take a look at assignments/ass1/insert_data.sql , which inserts sample data into your newly created tables, run them through MySQL client as well: 1 mysql -h localhost -u username ass1 -p < ../../insert_data.sql The data is meant for you to play with the database and test with your own SQLs. If you could not run them, it means the tables you've created using create_table.sql is wrong, please double check that your table creation SQLs are correct. Query from the Database \u00b6 In this part, you are going to write queries to play with the database you just created. For each part, create a file in your working directory, for example 1.sql , 2.sql etc. Query all fields for employees named Jones Query the name of employees with ID equals to 1 or 2 (order does not matter) Query the name of all employees except the one whose ID is 1 (ordered by ID) Query the name of all employees with age between 25 and 30 (inclusively, ordered by ID) Query all fields for employees whose name started with J (ordered by age) Query the names of all publishers, if one publisher has more than two books in the database, output the name of the publisher only once (ordered by name, ascii order) Query the id of all books that is borrowed after 2016-10-31 , also the IDs should be distinct (ordered by id) Query for each employee who has borrowed book more than once, output the id , name , and number of borrow record (name the field num ), ordered by num in descending order. This one is kind of challenging, the TA's solution uses JOIN, GROUP BY, HAVING and ORDER BY, check them out if you don't know what these key words mean for MySQL. Submit Your Solution \u00b6 Make sure you have files create_table.sql 1.sql , ..., 8.sql in your working directory. Then use the following command to submit these files (run it at your working directory). 1 2 3 git add . # add your submission into git git commit -m \"submission of xxx for ass1\" # identify your submission git push # push your local submission to your remote forked repository And then get to your GitHub page and create a pull request 1 . The time you create the pull request will be considered as the submission time. Note : the submitted files will be evaluated using an automatic script written in golang, the script will later be uploaded, so make sure you follow all these instructions to make the file hiearchy correct, otherwise the script won't work and you will lose the mark. Also, do not cheat by looking at other's submission, it violates our honor code. Should you have any question, try to search it using Google first. If want clarification of the assignment, then please create an issue in the project repository. References \u00b6 There are many tutorials online about how to write SQL, you might find the following links helpful MySQL Tutorial MySQL Tutorial https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/creating-a-pull-request-from-a-fork \u21a9","title":"Instruction"},{"location":"assignment1/readme/#assignment-1-basic-sql","text":"This is the first assignment of the course, it asks you to write SQL to create tables and query from them. Basically you need to use create select where join group by order by having to be able to finish the assignment.","title":"Assignment 1, Basic SQL"},{"location":"assignment1/readme/#working-directory-setup","text":"This is the first step of the assignment, you need to get yourself familiar with git and GitHub. First of all, create a GitHub id if you do not yet have one. Then fork this project on GitHub, which will create a mirror repository under your own account. Then git clone your forked project in your local environment. You need to setup your GitHub account on your local machine for git if you have not yet done so. 1 git clone https://github.com/your-github-id/IDBS-Spring20-Fudan.git Once you've cloned the project in your local environment, get to IDBS-Spring20-Fudan/assignments/ass1/submission and create a directory and name it by your student id, for example IDBS-Spring20-Fudan/assignments/ass1/submission/16307130177 , and this directory will be your working directory. You are ONLY allowed to modify files under this directory, any other modifications outside this directory will make your submission invalid.","title":"Working Directory Setup"},{"location":"assignment1/readme/#table-creation","text":"You need to create 3 tables under the database ass1 , namely employee , book and record . Create a file named create_table.sql under your working directory, and write the SQL to create the tables asked in that file. The constraint for each table is: employee has 4 columns, id , name , office and age , where id is the primary key and name and office is ascii string with length smaller than 32, while age is number between 0 and 100. Choose appropriate type for each column. book also has 4 columns, id , name , author and publisher , where id is the primary key and other columns are all ascii string with length smaller than 32. record has 3 columns, book_id , employee_id and time , where the two IDs are foreign keys that references the id column of book and employee , and time is of type DATE . Once you finished the table creation SQLs, create a database in your MySQL named ass1 , and then run the following command in your command line with username replaced by your username (such as root ), the command asks the MySQL client to connect to the MySQL server running at localhost on behalf of the user specified by the username and run the SQLs in the given file create_table.sql under database ass1 . 1 mysql -h localhost -u username ass1 -p < create_table.sql If mysql complains about any error, try to fix it in create_table.sql . You could drop and recreate the database ass1 if you've ruined the database with wrongly created tables. Once you've created the table, take a look at assignments/ass1/insert_data.sql , which inserts sample data into your newly created tables, run them through MySQL client as well: 1 mysql -h localhost -u username ass1 -p < ../../insert_data.sql The data is meant for you to play with the database and test with your own SQLs. If you could not run them, it means the tables you've created using create_table.sql is wrong, please double check that your table creation SQLs are correct.","title":"Table Creation"},{"location":"assignment1/readme/#query-from-the-database","text":"In this part, you are going to write queries to play with the database you just created. For each part, create a file in your working directory, for example 1.sql , 2.sql etc. Query all fields for employees named Jones Query the name of employees with ID equals to 1 or 2 (order does not matter) Query the name of all employees except the one whose ID is 1 (ordered by ID) Query the name of all employees with age between 25 and 30 (inclusively, ordered by ID) Query all fields for employees whose name started with J (ordered by age) Query the names of all publishers, if one publisher has more than two books in the database, output the name of the publisher only once (ordered by name, ascii order) Query the id of all books that is borrowed after 2016-10-31 , also the IDs should be distinct (ordered by id) Query for each employee who has borrowed book more than once, output the id , name , and number of borrow record (name the field num ), ordered by num in descending order. This one is kind of challenging, the TA's solution uses JOIN, GROUP BY, HAVING and ORDER BY, check them out if you don't know what these key words mean for MySQL.","title":"Query from the Database"},{"location":"assignment1/readme/#submit-your-solution","text":"Make sure you have files create_table.sql 1.sql , ..., 8.sql in your working directory. Then use the following command to submit these files (run it at your working directory). 1 2 3 git add . # add your submission into git git commit -m \"submission of xxx for ass1\" # identify your submission git push # push your local submission to your remote forked repository And then get to your GitHub page and create a pull request 1 . The time you create the pull request will be considered as the submission time. Note : the submitted files will be evaluated using an automatic script written in golang, the script will later be uploaded, so make sure you follow all these instructions to make the file hiearchy correct, otherwise the script won't work and you will lose the mark. Also, do not cheat by looking at other's submission, it violates our honor code. Should you have any question, try to search it using Google first. If want clarification of the assignment, then please create an issue in the project repository.","title":"Submit Your Solution"},{"location":"assignment1/readme/#references","text":"There are many tutorials online about how to write SQL, you might find the following links helpful MySQL Tutorial MySQL Tutorial https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/creating-a-pull-request-from-a-fork \u21a9","title":"References"},{"location":"assignment2/readme/","text":"Assignment 2, Evaluator \u00b6 In the first assignment, you have written several SQLs to help you build basic experience playing with MySQL, in this assignment you are going to continue the journey, but this time, you will use a programming language to interact with MySQL, namely, golang. Golang, developed by Google, is a statically typed programming language (we'll refer to golang as Go in the following content). It is becoming more and more popular in the recent several years, companies like bilibili 1 3 and zhihu 2 and so many more are using Go to build the backend of their applications. And the idea of cloud native and microservice are built almost on top of Go, just to name a few softwares in Go, docker, kubernetes, and TiDB (a distributed database compatible with MySQL, we probably will also play with it in the future). So it is very desirable and meaningful to start to learn this language. Go is also very simple, it is built with simplicity in mind, as long as you know how to write C code, it won't be hard to learn Go. However, Go does introduce many ideas that perhaps you are not familiar with, most of the ideas are related to concurrency, such as channel and goroutine , we will be using these features extensively in the assignments, since database systems are built to allow (or welcome) concurrent accesses, and Go has a good fame of being a concurrency friendly programming language. You might be frightened that you need to learn a new programming language, but it is a must for a good programmer to be fluent in many programming languages, and it won't be too hard given you already know at least one programming language. To make your learning experience less painful, follow the instructions below to learn it. Install Go compiler and setup the environment , we will be using the latest Go version, 1.14. Join the tour of Go , walk through the whole tutorial, and come back often when you have problems writing Go in the future. This is an excellent tutorial, and your TA also learned Go from here. It would take at least 2 days for you to fully understand the tutorial, so start early. Also, try some of the examples on your local machine, which will help you better understand the toolchain of Go. Note, the most important thing for you to learn is the concurrency part, you need to understand goroutine (kind of like a light-weighted thread) and sync.Mutex , since you will need it in this assignment. As for the syntax of Go, it is quite similar with C, so do not worry, you could just skim this part and come back when you need it. Read the provided code and make sure your understand every line of the code. If you don't, check the tutorial again. And if you are still confused, do not hesitate to ask questions in the comment bellow. Try to use GoLand for development, it provides the best Go development environment in your TA's opinion, and it is free for educational purpose. You could connect GoLand with your MySQL server and GoLand will be able to help you write your SQL. Setup \u00b6 To setup the environment for this assignment, you have the following steps to finish. Update Your Cloned Git Repository \u00b6 Your local repository only have your own code, in order to get the content for this assignment, you need to fetch data from GitHub. Use the following commands: 1 2 3 $ git remote add upstream xxx # add your TA's repository to the romote $ git fetch upstream # this command fetches the update in your TA's repository, it would take a while $ git merge upstream/master # merge the updates into your master, you can also do `git rebase upstream/master` if you used another branch other than master previously for assignment 1 Copy Provided Code to Your Working Directory \u00b6 The code provided is under assignments/ass2/evaluator/ . Similarly you have to create your working directory under assignments/ass2/submission/ Suppose your current directory is the root of the repository. 1 2 $ mkdir assignments/ass2/submission/YOURSTUDENTID # put your student id here $ cp assignments/ass2/evaluator/* assignments/ass2/submission/YOURSTUDENTID/ # copy provided code into your working directory You can only modify the files in your own working directory, any attempts to modify files outside your working directory will make your submission invalid. Especially, only utils.go in your working directory will be considered in this assignment (other files will be ignored, see assignments/ass2/submission/.gitignore ). With this said, you could actually modify other provided files like main.go if it helps you with understanding the code or debugging your own code, but your modification will not be considered when we evaluate your submission, and you should make sure your code in utils.go can work with the original codebase. You should generally only put your code between YOUR CODE BEGIN and YOUR CODE END . The evaluation of assignment 2 will be based on the three functions you filled in in utils.go . As for the packages, you can not introduce any other external packages (the go.mod file will be ignored for your submission, even if you do, we will not be able to run it). You are free to use other internal packages, as a reference the TA's solution only uses sync and reflect . Create a New Branch for Development \u00b6 It is your TA's fault that he didn't tell you this in assignment 1. It would be better that you don't work on the master branch, because that will make the git history messy. Create a new branch and develop your code in the new branch, you could name the branch ass2 . 1 2 $ git checkout - b ass2 # create and checkout to a new branch ass2 $ git add . && git commit - m \"update from upstream, start ass2\" # commit your modification (only `utils.go` will be tracked) and start working Modify Configuration \u00b6 Now edit utils.go , in the first YOUR CODE block, put your student id in EvaluateID , ../../../ass1/submission/ for SubmissionDir , and the user name and password to connect your MySQL server. You could then run 1 $ go run main.go utils.go at your working directory, you should see 1 submission created in the output if the configuration is correct. If you did not see this line, check the error message and search online, and try to fix it. You could ignore the printed error message above this line, these messages are for you to know if there are any problems with the submissions of assignment 1. They are only relevant if you found your solution for assignment 1 is not compliant with the evaluator, then these error messages tell you why. If you want to argue about your submission for assignment 1, create another pull request with your modified submission for assignment 1 (only modify files in your working directory for assignment 1) and explain why you think you deserve a higher score in the pull request, mistakes like creating tables using all UPPERCASE names sound like possible to have a second chance. Each submission created will have an integer array score , and score[0] is 0 if the submission's create_table.sql is wrong, otherwise it will be 1. score[1] to score[8] stands for the score for query 1 to query 8 in assignment 1, and they are obtained in the following manner. Concurrent Comparison Result Insert \u00b6 Take a look at compareAndInsert , which compares each submissions with all the submissions on each query, and insert a record for the comparison in the table comparison_result . The problem of this function is that it is single-threaded. As you might know, access database is IO-bounded, the CPU might wait for a lot of time for the response of the database, so it makes sense to make the insert concurrent so that the CPU could get more busy and making the insert faster. The single thread version provided in the provided code takes almost 1 minutes on your TA's laptop to insert 7200 records in the database. This is too slow! The QPS (query per second) is about 7200 / 60 = 120. With the help of goroutine, it can be easily made concurrent, so please make it concurrent and improve the QPS in ConcurrentCompareAndInsert . As a reference, it takes less than 4 seconds with your TA's simple concurrent version, a speed up of 15x. You could also do batch insert, which could be even faster, but you won't be able to play with concurrency. If you are interested, you could write a CompareAndBatchedInsert function in utils.go and test how faster it could be, however this part is unrated. Also as a reference, your kind TA provided you a concurrent createSubmissions in main.go , take a look if you don't know how to start. Also as a kind note, sql.DB is not thread-safe, you need multiple sql.DB if you want concurrent access of the database, and figuring out (by search it online) what is closure, and how to pass variable to a closure might be helpful. Run 1 $ go run main.go utils.go again, and you will see 1 ConcurrentCompareAndInsert takes xxxs instead of 1 ConcurrentCompareAndInsert Not Implemented Evaluate the Score \u00b6 Once you get all the comparison result, it is time to get the score for each submission on each query. We evaluate the submission using the following rule. In comparison_result , for each query, each submission has record of is_equal to every submissions, and the sum of is_equal is the vote of the submission for the query, if the submission has the highest vote, i.e. most of submissions agreed with this submission's result on the query, the score of the submission on this query will be 1, otherwise 0. Look at the output bellow in hints if you are still not sure how the rule works. You need to use a single query to insert the score result in the table score created in createScoreTable , where submitter is the ID of the submitter of the submission, item ranges from 1 to 8 and stands for each query, score being 0 or 1 means the score of submitter on query item , and vote is the vote mentioned above for sanity check. You need to finish GetScoreSQL in utils.go , which only returns a single string containing the query sent to MySQL that reads from comparison_result and inserts into score . This query can be rather complex and challenging, here are some hints that might be helpful UNION is a good wait to combine result of multiple queries Common Table Expression (CTE) can be helpful if you want to reuse the result of a subquery order by can be used with multiple column You can insert with values replaced by a select query Window functions might be helpful, check it out if you are interested, but you can finish this query without using it You are free to hack around using any features of MySQL you want (version 8.0), there are many possible ways, as long as you can make it with the GetScoreSQL function, you will get the score. Run 1 $ go run main.go utils.go again, and you will see 1 GetScoreSQL inserted xxx records into score instead of 1 GetScoreSQL Not Implemented Get the Score \u00b6 Finally, you need to fill in each submission's score (i.e. Submission.score ) with the data in table score . Finish GetScore and read score from table score and you will get output like 1 2 3 4 5 6 ... 18307130252 1 1 1 1 1 1 1 1 0 18300200015 1 1 1 1 1 1 1 1 0 18307130031 1 1 1 1 1 1 1 0 1 18307130112 1 1 1 1 1 1 0 1 0 ... if you run go run main.go utils.go . Hints \u00b6 The sample output from your TA is sample output 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 \u2570\u2500$ go run main.go utils.go 18307130154 0 Error 1146: Table 'ass1_18307130154.employee' doesn't exist 18307130163 0 Error 1049: Unknown database 'ass1' 19307130296 0 Error 1064: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'CREATE TABLE book( id int(32) not null auto_increment primary key, name var' at line 8 18307130071 1 Error 1054: Unknown column 'jones' in 'where clause' 18307130071 2 Error 1146: Table 'ass1_18307130071.empolyee' doesn't exist 18307130071 7 Error 1630: FUNCTION time.AFTER does not exist. Check the 'Function Name Parsing and Resolution' section in the Reference Manual 18307130071 8 Error 1054: Unknown column 'id' in 'field list' 18307130102 7 Error 1305: FUNCTION ass1_18307130102.to_date does not exist 19307130296 7 Error 1054: Unknown column 'id' in 'order clause' 19307130296 8 Error 1064: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'SELECT * FROM record WHERE record.employee_id=employee.id ) AS num>1 ORD' at line 5 18307130213 0 Error 1146: Table 'ass1_18307130213.employee' doesn't exist 18307130297 7 Error 1054: Unknown column 'id' in 'field list' 18307130252 8 Error 1064: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ') on employee.id = X.id where X.num > 1 order by X.num desc' at line 4 18307130213 1 Error 1146: Table 'ass1_18307130213.EMPLOYEE' doesn't exist 18307130213 2 Error 1146: Table 'ass1_18307130213.EMPLOYEE' doesn't exist 18307130213 3 Error 1146: Table 'ass1_18307130213.EMPLOYEE' doesn't exist 18307130213 4 Error 1146: Table 'ass1_18307130213.EMPLOYEE' doesn't exist 18307130213 5 Error 1146: Table 'ass1_18307130213.EMPLOYEE' doesn't exist 18307130213 6 Error 1146: Table 'ass1_18307130213.BOOK' doesn't exist 18307130213 7 Error 1146: Table 'ass1_18307130213.BOOK' doesn't exist 18307130252 8 Error 1064: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ') on employee.id = X.id where X.num > 1 order by X.num desc' at line 4 18307130213 1 Error 1146: Table 'ass1_18307130213.EMPLOYEE' doesn't exist 18307130213 2 Error 1146: Table 'ass1_18307130213.EMPLOYEE' doesn't exist 18307130213 3 Error 1146: Table 'ass1_18307130213.EMPLOYEE' doesn't exist 18307130213 4 Error 1146: Table 'ass1_18307130213.EMPLOYEE' doesn't exist 18307130213 5 Error 1146: Table 'ass1_18307130213.EMPLOYEE' doesn't exist 18307130213 6 Error 1146: Table 'ass1_18307130213.BOOK' doesn't exist 18307130213 7 Error 1146: Table 'ass1_18307130213.BOOK' doesn't exist 18307130213 8 Error 1146: Table 'ass1_18307130213.EMPLOYEE' doesn't exist submission created ConcurrentCompareAndInsert takes 4.491039717s GetScoreSQL inserted 264 records into score 18307130017 1 1 1 1 1 1 1 1 0 18307130122 1 1 1 1 1 1 1 1 0 18307130213 0 0 0 0 0 0 0 0 0 18300750006 1 1 1 1 1 1 1 1 1 19307130296 0 1 1 1 1 0 1 0 0 18307130024 1 1 1 1 1 1 1 1 1 18307130027 1 1 1 1 1 0 1 1 1 18307130102 1 1 1 1 1 1 1 0 1 18307130103 1 1 1 1 1 1 1 0 1 18307130112 1 1 1 1 1 1 0 1 0 18307130154 0 1 1 1 1 1 1 0 1 18307130297 1 1 1 1 1 1 1 0 0 15307130201 1 1 1 1 1 1 1 1 1 18307130128 1 1 1 1 1 1 1 1 0 18307130252 1 1 1 1 1 1 1 1 0 18307130266 1 1 1 1 1 1 1 1 1 18307130003 1 1 1 1 1 1 1 1 1 18307130182 1 1 1 1 1 1 1 1 1 19300290059 1 1 1 1 1 1 0 1 1 18307130071 1 0 0 0 0 1 0 0 0 18300200015 1 1 1 1 1 1 1 1 0 18307130031 1 1 1 1 1 1 1 0 1 18307130090 1 1 1 1 1 1 1 0 0 18307130116 1 1 1 1 1 1 1 0 0 18307130126 1 1 1 1 1 1 1 1 1 18307130172 1 1 1 1 1 1 1 0 1 18307130341 1 1 1 1 1 1 1 1 1 18300200009 1 1 1 1 1 1 1 0 0 18307130104 1 1 1 1 1 1 1 0 1 18307130123 1 1 1 1 1 1 1 1 1 18307130163 0 1 1 1 1 1 1 0 1 18307130340 1 1 1 1 1 1 1 1 1 18300200012 1 1 1 1 1 1 1 0 1 And some sample from table score sample from score 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 ass1_result_evaluated_by_16307130177> select * from score limit 30; +-------------+------+-------+------+ | submitter | item | score | vote | +-------------+------+-------+------+ | 15307130201 | 1 | 1 | 31 | | 15307130201 | 2 | 1 | 31 | | 15307130201 | 3 | 1 | 31 | | 15307130201 | 4 | 1 | 31 | | 15307130201 | 5 | 1 | 30 | | 15307130201 | 6 | 1 | 29 | | 15307130201 | 7 | 1 | 18 | | 15307130201 | 8 | 1 | 20 | | 18300200009 | 1 | 1 | 31 | | 18300200009 | 2 | 1 | 31 | | 18300200009 | 3 | 1 | 31 | | 18300200009 | 4 | 1 | 31 | | 18300200009 | 5 | 1 | 30 | | 18300200009 | 6 | 1 | 29 | | 18300200009 | 7 | 0 | 2 | | 18300200009 | 8 | 0 | 4 | | 18300200012 | 1 | 1 | 31 | | 18300200012 | 2 | 1 | 31 | | 18300200012 | 3 | 1 | 31 | | 18300200012 | 4 | 1 | 31 | | 18300200012 | 5 | 1 | 30 | | 18300200012 | 6 | 1 | 29 | | 18300200012 | 7 | 0 | 5 | | 18300200012 | 8 | 1 | 20 | | 18300200015 | 1 | 1 | 31 | | 18300200015 | 2 | 1 | 31 | | 18300200015 | 3 | 1 | 31 | | 18300200015 | 4 | 1 | 31 | | 18300200015 | 5 | 1 | 30 | | 18300200015 | 6 | 1 | 29 | +-------------+------+-------+------+ Submit your solution \u00b6 As you have done for assignment 1, commit your change for utils.go and create a pull request to submit it. Since you used another branch ( ass2 as your TA told you above), do the following to push your code to your repository 1 $ git push --set-upstream origin ass2 Also do not look at other's submission before your submission get merged. https://github.com/bilibili/kratos \u21a9 https://zhuanlan.zhihu.com/p/48039838 \u21a9 https://www.bilibili.com/video/av29079011/ \u21a9","title":"Instruction"},{"location":"assignment2/readme/#assignment-2-evaluator","text":"In the first assignment, you have written several SQLs to help you build basic experience playing with MySQL, in this assignment you are going to continue the journey, but this time, you will use a programming language to interact with MySQL, namely, golang. Golang, developed by Google, is a statically typed programming language (we'll refer to golang as Go in the following content). It is becoming more and more popular in the recent several years, companies like bilibili 1 3 and zhihu 2 and so many more are using Go to build the backend of their applications. And the idea of cloud native and microservice are built almost on top of Go, just to name a few softwares in Go, docker, kubernetes, and TiDB (a distributed database compatible with MySQL, we probably will also play with it in the future). So it is very desirable and meaningful to start to learn this language. Go is also very simple, it is built with simplicity in mind, as long as you know how to write C code, it won't be hard to learn Go. However, Go does introduce many ideas that perhaps you are not familiar with, most of the ideas are related to concurrency, such as channel and goroutine , we will be using these features extensively in the assignments, since database systems are built to allow (or welcome) concurrent accesses, and Go has a good fame of being a concurrency friendly programming language. You might be frightened that you need to learn a new programming language, but it is a must for a good programmer to be fluent in many programming languages, and it won't be too hard given you already know at least one programming language. To make your learning experience less painful, follow the instructions below to learn it. Install Go compiler and setup the environment , we will be using the latest Go version, 1.14. Join the tour of Go , walk through the whole tutorial, and come back often when you have problems writing Go in the future. This is an excellent tutorial, and your TA also learned Go from here. It would take at least 2 days for you to fully understand the tutorial, so start early. Also, try some of the examples on your local machine, which will help you better understand the toolchain of Go. Note, the most important thing for you to learn is the concurrency part, you need to understand goroutine (kind of like a light-weighted thread) and sync.Mutex , since you will need it in this assignment. As for the syntax of Go, it is quite similar with C, so do not worry, you could just skim this part and come back when you need it. Read the provided code and make sure your understand every line of the code. If you don't, check the tutorial again. And if you are still confused, do not hesitate to ask questions in the comment bellow. Try to use GoLand for development, it provides the best Go development environment in your TA's opinion, and it is free for educational purpose. You could connect GoLand with your MySQL server and GoLand will be able to help you write your SQL.","title":"Assignment 2, Evaluator"},{"location":"assignment2/readme/#setup","text":"To setup the environment for this assignment, you have the following steps to finish.","title":"Setup"},{"location":"assignment2/readme/#update-your-cloned-git-repository","text":"Your local repository only have your own code, in order to get the content for this assignment, you need to fetch data from GitHub. Use the following commands: 1 2 3 $ git remote add upstream xxx # add your TA's repository to the romote $ git fetch upstream # this command fetches the update in your TA's repository, it would take a while $ git merge upstream/master # merge the updates into your master, you can also do `git rebase upstream/master` if you used another branch other than master previously for assignment 1","title":"Update Your Cloned Git Repository"},{"location":"assignment2/readme/#copy-provided-code-to-your-working-directory","text":"The code provided is under assignments/ass2/evaluator/ . Similarly you have to create your working directory under assignments/ass2/submission/ Suppose your current directory is the root of the repository. 1 2 $ mkdir assignments/ass2/submission/YOURSTUDENTID # put your student id here $ cp assignments/ass2/evaluator/* assignments/ass2/submission/YOURSTUDENTID/ # copy provided code into your working directory You can only modify the files in your own working directory, any attempts to modify files outside your working directory will make your submission invalid. Especially, only utils.go in your working directory will be considered in this assignment (other files will be ignored, see assignments/ass2/submission/.gitignore ). With this said, you could actually modify other provided files like main.go if it helps you with understanding the code or debugging your own code, but your modification will not be considered when we evaluate your submission, and you should make sure your code in utils.go can work with the original codebase. You should generally only put your code between YOUR CODE BEGIN and YOUR CODE END . The evaluation of assignment 2 will be based on the three functions you filled in in utils.go . As for the packages, you can not introduce any other external packages (the go.mod file will be ignored for your submission, even if you do, we will not be able to run it). You are free to use other internal packages, as a reference the TA's solution only uses sync and reflect .","title":"Copy Provided Code to Your Working Directory"},{"location":"assignment2/readme/#create-a-new-branch-for-development","text":"It is your TA's fault that he didn't tell you this in assignment 1. It would be better that you don't work on the master branch, because that will make the git history messy. Create a new branch and develop your code in the new branch, you could name the branch ass2 . 1 2 $ git checkout - b ass2 # create and checkout to a new branch ass2 $ git add . && git commit - m \"update from upstream, start ass2\" # commit your modification (only `utils.go` will be tracked) and start working","title":"Create a New Branch for Development"},{"location":"assignment2/readme/#modify-configuration","text":"Now edit utils.go , in the first YOUR CODE block, put your student id in EvaluateID , ../../../ass1/submission/ for SubmissionDir , and the user name and password to connect your MySQL server. You could then run 1 $ go run main.go utils.go at your working directory, you should see 1 submission created in the output if the configuration is correct. If you did not see this line, check the error message and search online, and try to fix it. You could ignore the printed error message above this line, these messages are for you to know if there are any problems with the submissions of assignment 1. They are only relevant if you found your solution for assignment 1 is not compliant with the evaluator, then these error messages tell you why. If you want to argue about your submission for assignment 1, create another pull request with your modified submission for assignment 1 (only modify files in your working directory for assignment 1) and explain why you think you deserve a higher score in the pull request, mistakes like creating tables using all UPPERCASE names sound like possible to have a second chance. Each submission created will have an integer array score , and score[0] is 0 if the submission's create_table.sql is wrong, otherwise it will be 1. score[1] to score[8] stands for the score for query 1 to query 8 in assignment 1, and they are obtained in the following manner.","title":"Modify Configuration"},{"location":"assignment2/readme/#concurrent-comparison-result-insert","text":"Take a look at compareAndInsert , which compares each submissions with all the submissions on each query, and insert a record for the comparison in the table comparison_result . The problem of this function is that it is single-threaded. As you might know, access database is IO-bounded, the CPU might wait for a lot of time for the response of the database, so it makes sense to make the insert concurrent so that the CPU could get more busy and making the insert faster. The single thread version provided in the provided code takes almost 1 minutes on your TA's laptop to insert 7200 records in the database. This is too slow! The QPS (query per second) is about 7200 / 60 = 120. With the help of goroutine, it can be easily made concurrent, so please make it concurrent and improve the QPS in ConcurrentCompareAndInsert . As a reference, it takes less than 4 seconds with your TA's simple concurrent version, a speed up of 15x. You could also do batch insert, which could be even faster, but you won't be able to play with concurrency. If you are interested, you could write a CompareAndBatchedInsert function in utils.go and test how faster it could be, however this part is unrated. Also as a reference, your kind TA provided you a concurrent createSubmissions in main.go , take a look if you don't know how to start. Also as a kind note, sql.DB is not thread-safe, you need multiple sql.DB if you want concurrent access of the database, and figuring out (by search it online) what is closure, and how to pass variable to a closure might be helpful. Run 1 $ go run main.go utils.go again, and you will see 1 ConcurrentCompareAndInsert takes xxxs instead of 1 ConcurrentCompareAndInsert Not Implemented","title":"Concurrent Comparison Result Insert"},{"location":"assignment2/readme/#evaluate-the-score","text":"Once you get all the comparison result, it is time to get the score for each submission on each query. We evaluate the submission using the following rule. In comparison_result , for each query, each submission has record of is_equal to every submissions, and the sum of is_equal is the vote of the submission for the query, if the submission has the highest vote, i.e. most of submissions agreed with this submission's result on the query, the score of the submission on this query will be 1, otherwise 0. Look at the output bellow in hints if you are still not sure how the rule works. You need to use a single query to insert the score result in the table score created in createScoreTable , where submitter is the ID of the submitter of the submission, item ranges from 1 to 8 and stands for each query, score being 0 or 1 means the score of submitter on query item , and vote is the vote mentioned above for sanity check. You need to finish GetScoreSQL in utils.go , which only returns a single string containing the query sent to MySQL that reads from comparison_result and inserts into score . This query can be rather complex and challenging, here are some hints that might be helpful UNION is a good wait to combine result of multiple queries Common Table Expression (CTE) can be helpful if you want to reuse the result of a subquery order by can be used with multiple column You can insert with values replaced by a select query Window functions might be helpful, check it out if you are interested, but you can finish this query without using it You are free to hack around using any features of MySQL you want (version 8.0), there are many possible ways, as long as you can make it with the GetScoreSQL function, you will get the score. Run 1 $ go run main.go utils.go again, and you will see 1 GetScoreSQL inserted xxx records into score instead of 1 GetScoreSQL Not Implemented","title":"Evaluate the Score"},{"location":"assignment2/readme/#get-the-score","text":"Finally, you need to fill in each submission's score (i.e. Submission.score ) with the data in table score . Finish GetScore and read score from table score and you will get output like 1 2 3 4 5 6 ... 18307130252 1 1 1 1 1 1 1 1 0 18300200015 1 1 1 1 1 1 1 1 0 18307130031 1 1 1 1 1 1 1 0 1 18307130112 1 1 1 1 1 1 0 1 0 ... if you run go run main.go utils.go .","title":"Get the Score"},{"location":"assignment2/readme/#hints","text":"The sample output from your TA is sample output 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 \u2570\u2500$ go run main.go utils.go 18307130154 0 Error 1146: Table 'ass1_18307130154.employee' doesn't exist 18307130163 0 Error 1049: Unknown database 'ass1' 19307130296 0 Error 1064: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'CREATE TABLE book( id int(32) not null auto_increment primary key, name var' at line 8 18307130071 1 Error 1054: Unknown column 'jones' in 'where clause' 18307130071 2 Error 1146: Table 'ass1_18307130071.empolyee' doesn't exist 18307130071 7 Error 1630: FUNCTION time.AFTER does not exist. Check the 'Function Name Parsing and Resolution' section in the Reference Manual 18307130071 8 Error 1054: Unknown column 'id' in 'field list' 18307130102 7 Error 1305: FUNCTION ass1_18307130102.to_date does not exist 19307130296 7 Error 1054: Unknown column 'id' in 'order clause' 19307130296 8 Error 1064: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'SELECT * FROM record WHERE record.employee_id=employee.id ) AS num>1 ORD' at line 5 18307130213 0 Error 1146: Table 'ass1_18307130213.employee' doesn't exist 18307130297 7 Error 1054: Unknown column 'id' in 'field list' 18307130252 8 Error 1064: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ') on employee.id = X.id where X.num > 1 order by X.num desc' at line 4 18307130213 1 Error 1146: Table 'ass1_18307130213.EMPLOYEE' doesn't exist 18307130213 2 Error 1146: Table 'ass1_18307130213.EMPLOYEE' doesn't exist 18307130213 3 Error 1146: Table 'ass1_18307130213.EMPLOYEE' doesn't exist 18307130213 4 Error 1146: Table 'ass1_18307130213.EMPLOYEE' doesn't exist 18307130213 5 Error 1146: Table 'ass1_18307130213.EMPLOYEE' doesn't exist 18307130213 6 Error 1146: Table 'ass1_18307130213.BOOK' doesn't exist 18307130213 7 Error 1146: Table 'ass1_18307130213.BOOK' doesn't exist 18307130252 8 Error 1064: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ') on employee.id = X.id where X.num > 1 order by X.num desc' at line 4 18307130213 1 Error 1146: Table 'ass1_18307130213.EMPLOYEE' doesn't exist 18307130213 2 Error 1146: Table 'ass1_18307130213.EMPLOYEE' doesn't exist 18307130213 3 Error 1146: Table 'ass1_18307130213.EMPLOYEE' doesn't exist 18307130213 4 Error 1146: Table 'ass1_18307130213.EMPLOYEE' doesn't exist 18307130213 5 Error 1146: Table 'ass1_18307130213.EMPLOYEE' doesn't exist 18307130213 6 Error 1146: Table 'ass1_18307130213.BOOK' doesn't exist 18307130213 7 Error 1146: Table 'ass1_18307130213.BOOK' doesn't exist 18307130213 8 Error 1146: Table 'ass1_18307130213.EMPLOYEE' doesn't exist submission created ConcurrentCompareAndInsert takes 4.491039717s GetScoreSQL inserted 264 records into score 18307130017 1 1 1 1 1 1 1 1 0 18307130122 1 1 1 1 1 1 1 1 0 18307130213 0 0 0 0 0 0 0 0 0 18300750006 1 1 1 1 1 1 1 1 1 19307130296 0 1 1 1 1 0 1 0 0 18307130024 1 1 1 1 1 1 1 1 1 18307130027 1 1 1 1 1 0 1 1 1 18307130102 1 1 1 1 1 1 1 0 1 18307130103 1 1 1 1 1 1 1 0 1 18307130112 1 1 1 1 1 1 0 1 0 18307130154 0 1 1 1 1 1 1 0 1 18307130297 1 1 1 1 1 1 1 0 0 15307130201 1 1 1 1 1 1 1 1 1 18307130128 1 1 1 1 1 1 1 1 0 18307130252 1 1 1 1 1 1 1 1 0 18307130266 1 1 1 1 1 1 1 1 1 18307130003 1 1 1 1 1 1 1 1 1 18307130182 1 1 1 1 1 1 1 1 1 19300290059 1 1 1 1 1 1 0 1 1 18307130071 1 0 0 0 0 1 0 0 0 18300200015 1 1 1 1 1 1 1 1 0 18307130031 1 1 1 1 1 1 1 0 1 18307130090 1 1 1 1 1 1 1 0 0 18307130116 1 1 1 1 1 1 1 0 0 18307130126 1 1 1 1 1 1 1 1 1 18307130172 1 1 1 1 1 1 1 0 1 18307130341 1 1 1 1 1 1 1 1 1 18300200009 1 1 1 1 1 1 1 0 0 18307130104 1 1 1 1 1 1 1 0 1 18307130123 1 1 1 1 1 1 1 1 1 18307130163 0 1 1 1 1 1 1 0 1 18307130340 1 1 1 1 1 1 1 1 1 18300200012 1 1 1 1 1 1 1 0 1 And some sample from table score sample from score 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 ass1_result_evaluated_by_16307130177> select * from score limit 30; +-------------+------+-------+------+ | submitter | item | score | vote | +-------------+------+-------+------+ | 15307130201 | 1 | 1 | 31 | | 15307130201 | 2 | 1 | 31 | | 15307130201 | 3 | 1 | 31 | | 15307130201 | 4 | 1 | 31 | | 15307130201 | 5 | 1 | 30 | | 15307130201 | 6 | 1 | 29 | | 15307130201 | 7 | 1 | 18 | | 15307130201 | 8 | 1 | 20 | | 18300200009 | 1 | 1 | 31 | | 18300200009 | 2 | 1 | 31 | | 18300200009 | 3 | 1 | 31 | | 18300200009 | 4 | 1 | 31 | | 18300200009 | 5 | 1 | 30 | | 18300200009 | 6 | 1 | 29 | | 18300200009 | 7 | 0 | 2 | | 18300200009 | 8 | 0 | 4 | | 18300200012 | 1 | 1 | 31 | | 18300200012 | 2 | 1 | 31 | | 18300200012 | 3 | 1 | 31 | | 18300200012 | 4 | 1 | 31 | | 18300200012 | 5 | 1 | 30 | | 18300200012 | 6 | 1 | 29 | | 18300200012 | 7 | 0 | 5 | | 18300200012 | 8 | 1 | 20 | | 18300200015 | 1 | 1 | 31 | | 18300200015 | 2 | 1 | 31 | | 18300200015 | 3 | 1 | 31 | | 18300200015 | 4 | 1 | 31 | | 18300200015 | 5 | 1 | 30 | | 18300200015 | 6 | 1 | 29 | +-------------+------+-------+------+","title":"Hints"},{"location":"assignment2/readme/#submit-your-solution","text":"As you have done for assignment 1, commit your change for utils.go and create a pull request to submit it. Since you used another branch ( ass2 as your TA told you above), do the following to push your code to your repository 1 $ git push --set-upstream origin ass2 Also do not look at other's submission before your submission get merged. https://github.com/bilibili/kratos \u21a9 https://zhuanlan.zhihu.com/p/48039838 \u21a9 https://www.bilibili.com/video/av29079011/ \u21a9","title":"Submit your solution"}]}